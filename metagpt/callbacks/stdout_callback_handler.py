"""
This module contains the default callback handler.
"""
from typing import Optional
from metagpt.callbacks.base_callback_handler import BaseCallbackHandler, SenderInfo

class StdoutCallbackHander(BaseCallbackHandler):
    """
    Default callback handler that prints the message to stdout.
    """

    def on_new_message(self, sender_info:Optional[SenderInfo])->None:
        """
        Called when a new message is received.
        Args:
            sender_info: Sender Info object containing sender info
        """
        if sender_info is None:
            print("System says:")
        else:
            print(f"{sender_info.name} ({sender_info.role}) says:")


    def on_cost_updated(self, cost: float) -> None:
        """
        Called when the cost is updated.
        Args:
            cost: The cost of the current message
        """
        print(f"Current Cost: {cost}")


    def on_new_file_generated(self, sender_info:SenderInfo, file_type: str, file_path: str) -> None:
        """
        Called when a new file is generated.
        Args:
            sender_info: Sender Info object containing sender info
            file_type: The type of the generated file
            file_path: The path to the generated file
        """
        print(f"{sender_info.name} - {sender_info.role} generated {file_type} at {file_path}")


    def on_new_workspace_generated(self, workspace_path: str) -> None:
        """
        Called when a new workspace is generated.
        Args:
            workspace_path: The path to the generated workspace
        """
        print(f"New Workspace generated at {workspace_path}")


    def on_new_token_generated(self, token: str) -> None:
        """
        Called when a new token is generated.
        Args:
            token: The token generated by the LLM Model
        """
        print(token, end="")

    def on_message_end(self) -> None:
        """
        Called when a message ends.
        """
        print()